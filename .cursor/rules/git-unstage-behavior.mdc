---
description: Git unstage file behavior and implementation best practices
---

# Git Unstage File Implementation Best Practices

## Critical Lesson: Correct Unstage Implementation

When implementing Git unstage functionality, the most common mistake is using the wrong method that causes files to be marked as deleted in the index instead of properly unstaging them.

### The Problem
- Using `index.remove_path()` directly causes files to be marked as deleted in the index
- This is NOT the same as `git reset HEAD <file>` behavior
- Users expect files to be unstaged (removed from staging area) without being marked as deleted

### The Correct Solution
Always use `repo.reset_default()` method for unstage operations:

```rust
// ✅ CORRECT - Use reset_default method
#[tauri::command]
async fn unstage_file(repo_path: String, file_path: String) -> Result<String, String> {
    let repo = Repository::open(&repo_path)
        .map_err(|e| format!("Failed to open repository: {}", e))?;

    let head_obj = repo.revparse_single("HEAD")
        .map_err(|e| format!("Failed to get HEAD object: {}", e))?;

    // This is equivalent to: git reset HEAD <file>
    repo.reset_default(Some(&head_obj), &[Path::new(&file_path)])
        .map_err(|e| format!("Failed to unstage file: {}", e))?;
    
    Ok(format!("Successfully unstaged {}", file_path))
}
```

### What NOT to Do
```rust
// ❌ WRONG - This marks files as deleted in index
index.remove_path(Path::new(&file_path))
    .map_err(|e| format!("Failed to remove file from index: {}", e))?;
```

### Expected Behavior
When unstaging a file:
- ✅ File is removed from staging area
- ✅ File is NOT marked as deleted in index
- ✅ If file exists in HEAD, it's restored to HEAD state
- ✅ If file doesn't exist in HEAD, it's removed from index
- ✅ Only affects the specified file, not all staged files

### Files Involved
- Backend: [src-tauri/src/main.rs](mdc:src-tauri/src/main.rs) - `unstage_file` function
- Frontend: [src/components/WorkspaceStatus.tsx](mdc:src/components/WorkspaceStatus.tsx) - Unstage button handler

### Key Takeaway
**Always use `repo.reset_default()` for unstage operations** - this is the correct equivalent of `git reset HEAD <file>` and provides the expected user behavior.