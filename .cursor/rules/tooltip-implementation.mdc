---
description: Tooltip implementation best practices for React components
---

# Tooltip Implementation Best Practices

## Key Requirements for Tooltip Components

When implementing tooltips in this codebase, follow these patterns established in [VSCodeDiff.tsx](mdc:src/components/VSCodeDiff.tsx):

### 1. Positioning and Visibility
- Use React Portal with `createPortal(tooltip, document.body)` to avoid parent container clipping
- Use `fixed` positioning with `getBoundingClientRect()` for accurate screen coordinates
- Implement smart positioning that checks available space in all directions
- Use high z-index (`z-[9999]`) to ensure tooltip appears above all other elements

### 2. Event Handling
- Implement hover delay (100ms) to prevent flickering when mouse moves between trigger and tooltip
- Use `useRef` to store timeout IDs for proper cleanup
- Handle both trigger element and tooltip element mouse events

### 3. Scroll Event Prevention
- Use native `addEventListener` with `{ passive: false, capture: true }` options
- Prevent scroll events from bubbling to parent containers
- This pattern is also used in [FileDiffModal.tsx](mdc:src/components/FileDiffModal.tsx)

### 4. Code Structure
```typescript
// Essential refs and state
const [isVisible, setIsVisible] = useState(false)
const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 })
const triggerRef = useRef<HTMLDivElement>(null)
const tooltipRef = useRef<HTMLDivElement>(null)
const hideTimeoutRef = useRef<number | null>(null)

// Scroll prevention effect
useEffect(() => {
  const tooltipElement = tooltipRef.current
  if (!tooltipElement || !isVisible) return

  const handleWheel = (e: WheelEvent) => {
    e.stopPropagation()
    e.preventDefault()
  }

  tooltipElement.addEventListener('wheel', handleWheel, { passive: false, capture: true })
  return () => {
    tooltipElement.removeEventListener('wheel', handleWheel, { capture: true })
  }
}, [isVisible])
```

### 5. Common Issues to Avoid
- Don't use relative positioning for tooltips that might be clipped by parent containers
- Don't rely on React synthetic events for scroll prevention - use native events
- Always clean up timeouts and event listeners in useEffect cleanup functions
- Test tooltip behavior when scrolling and when tooltip content overflows